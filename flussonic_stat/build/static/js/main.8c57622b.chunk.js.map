{"version":3,"sources":["redux/types.js","redux/actions/data-actions.js","component/rechart.js","hooks/getDate.js","component/activeTable.js","component/historyTable.js","App.js","redux/reducers/dataReducer.js","redux/reducers/statusConnectionsReducer.js","redux/reducers/rootReducer.js","index.js"],"names":["GET_DATA","GET_STATUS_CLOSED","GET_STATUS_OPENED","statusConnectionsActions","url","fullUrl","window","location","origin","dispatch","a","axios","response","console","log","data","type","payload","closed","opened","Recharts","props","useDispatch","state","series","name","useSelector","statData","options","chart","height","width","toolbar","show","xaxis","stroke","curve","title","text","align","markers","size","shape","useEffect","dataAction","token","GetDate","date","day","Date","getDate","months","getMonth","hours","getHours","minutes","getMinutes","seconds","getSeconds","ActiveTable","statusConnections","TableContainer","component","Paper","Table","sx","minWidth","aria-label","TableHead","TableRow","TableCell","colSpan","TableBody","map","row","border","scope","my_field","title_channel","ip","user_agent","length","slice","created_at","id","HistoryTable","deleted_at","App","match","params","Grid","container","spacing","item","xs","lg","initialState","rootReducer","combineReducers","action","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.8c57622b.chunk.js","sourcesContent":["export const GET_DATA = 'GET_DATA'\nexport const GET_STATUS_CLOSED = 'GET_STATUS_CLOSED'\nexport const GET_STATUS_OPENED = 'GET_STATUS_OPENED'\n","import {GET_DATA, GET_STATUS_CLOSED, GET_STATUS_OPENED} from \"../types\";\nimport axios from \"axios\";\n\nlet baseUrl = ''\n\nexport const dataAction = (url) => {\n\n    if (window.location.origin === 'http://localhost:3000' || window.location.origin === 'http://127.0.0.1:3000') {\n        baseUrl = 'http://localhost:8000/stat/'\n    } else {\n        baseUrl = window.location.origin + '/stat/'\n    }\n\n    const fullUrl = baseUrl + url\n    return async dispatch => {\n        try {\n            const response = await axios(fullUrl)\n            dispatch({type: GET_DATA, payload: response.data})\n        } catch (e) {\n            dispatch({type: GET_DATA, payload: []})\n        }\n    }\n}\n\nexport const statusConnectionsActions = (url) => {\n\n    if (window.location.origin === 'http://localhost:3000' || window.location.origin === 'http://127.0.0.1:3000') {\n        baseUrl = 'http://localhost:8000/notify_session/forrechart/'\n    } else {\n        baseUrl = window.location.origin + '/notify_session/forrechart/'\n    }\n\n    const fullUrl = baseUrl + url\n\n    return async dispatch => {\n        try {\n            const response = await axios(fullUrl)\n            console.log(response.data);\n            dispatch({type: GET_STATUS_CLOSED, payload: response.data.closed})\n            dispatch({type: GET_STATUS_OPENED, payload: response.data.opened})\n        } catch (e) {\n            dispatch({type: GET_STATUS_CLOSED, payload: []})\n            dispatch({type: GET_STATUS_OPENED, payload: []})\n        }\n    }\n\n}","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ReactApexChart from 'react-apexcharts'\nimport {dataAction} from \"../redux/actions/data-actions\";\n\nfunction Recharts(props) {\n\n    const dispatch = useDispatch()\n    const statData = useSelector(state => state.statData.data)\n\n    const state = {\n\n        series: [\n            {\n                name: \"Online\",\n                data: statData\n            }\n        ],\n        options: {\n            chart: {\n                height: 380,\n                width: \"100%\",\n                type: \"area\",\n                toolbar: {\n                    show: false\n                }\n            },\n            xaxis: {\n                type: 'datetime'\n            },\n            stroke: {\n                curve: 'smooth',\n                width: 1,\n            },\n            title: {\n                text: 'Connections user',\n                align: 'left'\n            },\n            markers: {\n                size: 0,\n                shape: 'square'\n            }\n        }\n    }\n\n    useEffect(() => {\n        dispatch(dataAction(props.token))\n    }, [])\n\n    return (\n        <ReactApexChart options={state.options} series={state.series} type=\"line\" height={350} />\n    );\n}\n\nexport default Recharts;\n","const GetDate = (date) => {\n    const day = new Date(date).getDate()\n    const months = new Date(date).getMonth() + 1\n    const hours = new Date(date).getHours()\n    const minutes = new Date(date).getMinutes()\n    const seconds = new Date(date).getSeconds()\n\n    return (\n        `${months}/${day} ${hours}:${minutes}:${seconds}`\n    )\n}\n\nexport default GetDate","import React, {useEffect} from 'react';\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {statusConnectionsActions} from \"../redux/actions/data-actions\";\nimport GetDate from \"../hooks/getDate\";\n\nfunction ActiveTable(props) {\n\n    const dispatch = useDispatch()\n    const statData = useSelector(state => state.statusConnections.opened)\n\n    useEffect(() => {\n        dispatch(statusConnectionsActions(props.token))\n    }, [])\n\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{minWidth: 650}} size=\"small\" aria-label=\"a dense table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"center\" colSpan={5}>\n                            Active Connections\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Id Channel</TableCell>\n                        <TableCell align=\"right\">Type</TableCell>\n                        <TableCell align=\"right\">Ip</TableCell>\n                        <TableCell align=\"right\">User Agent</TableCell>\n                        <TableCell align=\"right\">Start</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {statData.map((row) => (\n                        <TableRow\n                            key={row.id}\n                            sx={{'&:last-child td, &:last-child th': {border: 0}}}\n                        >\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.my_field.title_channel}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.type}</TableCell>\n                            <TableCell align=\"right\">{row.ip}</TableCell>\n                            <TableCell align=\"right\">{\n                                row.user_agent.length > 30 ? row.user_agent.slice(0, 30) + '...' : row.user_agent\n                            }</TableCell>\n                            <TableCell align=\"right\">{\n                                GetDate(row.created_at)\n                            }</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default ActiveTable;","import React, {useEffect} from 'react';\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {statusConnectionsActions} from \"../redux/actions/data-actions\";\nimport GetDate from \"../hooks/getDate\";\n\nfunction HistoryTable(props) {\n\n    const dispatch = useDispatch()\n    const statData = useSelector(state => state.statusConnections.closed)\n\n    useEffect(() => {\n        dispatch(statusConnectionsActions(props.token))\n    }, [])\n\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{minWidth: 650}} size=\"small\" aria-label=\"customized table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"center\" colSpan={5}>\n                            History Connections\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Id Channel</TableCell>\n                        <TableCell align=\"right\">Type</TableCell>\n                        <TableCell align=\"right\">Ip</TableCell>\n                        <TableCell align=\"right\">User Agent</TableCell>\n                        <TableCell align=\"right\">End</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {statData.map((row) => (\n                        <TableRow\n                            key={row.id}\n                            sx={{'&:last-child td, &:last-child th': {border: 0}}}\n                        >\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.my_field.title_channel}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.type}</TableCell>\n                            <TableCell align=\"right\">{row.ip}</TableCell>\n                            <TableCell align=\"right\">{\n                                row.user_agent.length > 30 ? row.user_agent.slice(0, 30) + '...' : row.user_agent\n                            }</TableCell>\n                            <TableCell align=\"right\">{\n                                GetDate(row.deleted_at)\n                            }</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default HistoryTable;","import React from 'react';\nimport Recharts from \"./component/rechart\";\nimport ActiveTable from \"./component/activeTable\";\nimport HistoryTable from \"./component/historyTable\";\nimport Grid from '@mui/material/Grid';\n\nfunction App(props) {\n    const token = props.match.params.data\n    return (\n        <>\n            <Recharts token={token}/>\n            <Grid container spacing={1}>\n                <Grid item xs={12} lg={6}>\n                    <ActiveTable token={token}/>\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <HistoryTable token={token}/>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nexport default App;\n","import {GET_DATA} from \"../types\";\n\nconst initialState = {\n    data: []\n}\n\nexport const dataReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_DATA:\n            return {\n                ...state, data: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import {GET_STATUS_CLOSED, GET_STATUS_OPENED} from \"../types\";\n\nconst initialState = {\n    closed: [],\n    opened: []\n}\n\nexport const statusConnections = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_STATUS_CLOSED:\n            return {\n                ...state, closed: action.payload\n            }\n        case GET_STATUS_OPENED:\n            return {\n                ...state, opened: action.payload\n            }\n        default:\n            return state\n    }\n}","import {combineReducers} from \"redux\";\nimport {dataReducer} from \"./dataReducer\";\nimport {statusConnections} from \"./statusConnectionsReducer\";\n\nexport  const rootReducer = combineReducers({\n    statData: dataReducer,\n    statusConnections: statusConnections\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport App from './App';\n\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport thunk from \"redux-thunk\";\nimport {rootReducer} from \"./redux/reducers/rootReducer\";\n\nconst store = createStore(rootReducer, compose(\n    applyMiddleware(\n        thunk\n    )\n))\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Switch>\n                <Route exact path='/:data' component={App} />\n            </Switch>\n        </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}